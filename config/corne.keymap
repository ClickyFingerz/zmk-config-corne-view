#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>

// Layer Definitions
#define COLEMAK 0
#define QWERTY 1
#define NAV 2
#define NUM 3
#define SYM 4
#define MEDIA 5
#define FN 6
#define MOUSE 7

/ {
// Behavior configuration from https://zmk.dev/docs/behaviors/hold-tap
    behaviors {
        lh_pht: left_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_POSITIONAL_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-unless-interrupted";
            tapping-term-ms = <100>;                        // <---[[produces tap if held longer than tapping-term-ms]]
            quick-tap-ms = <200>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <5 6 7 8 9 10>;    // <---[[right-hand keys]]
        };
        rh_pht: right_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_POSITIONAL_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-unless-interrupted";
            tapping-term-ms = <100>;                        // <---[[produces tap if held longer than tapping-term-ms]]
            quick-tap-ms = <200>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <0 1 2 3 4>;    // <---[[left-hand keys]]
        };
    };
    
// Keymap configuration (Colemak-DHm)
    keymap {
        compatible = "zmk,keymap";

        colemak {
// -----------------------------------------------------------------------------------------------------------------------------
// |   `    |   Q    |   W    |     F     |     P     |     B     | # |     J     |    L     |    U    |    Y   |   ;    | BSPC  |
// | NAV    | A/LGUI | R/LALT |  S/LCTRL  |  T/LSHFT  |     G     | # |     M     | N/LSHFT  | E/LCTRL | I/LALT | O/LGUI |   '   |
// | LCTRL  |   Z    |   X    |     C     |     D     |     V     | # |     K     |    H     |    ,    |    .   |   /    | ENTER |
//                            | ESC/MEDIA |  SPC/NAV  | TAB/MOUSE | # | ENTER/SYM | BSPC/NUM | DEL/FN  |

            bindings = <
&kp GRAVE   &kp Q           &kp W           &kp F              &kp P              &kp B                &kp J          &kp L             &kp U              &kp Y             &kp SEMI           &kp BSPC
&mo NAV     &lh_pht LGUI A  &lh_pht LALT R  &lh_pht LCTRL S    &lh_pht LSHFT T    &kp G                &kp M          &rh_pht LSHFT N   &rh_pht LCTRL E    &rh_pht LALT I    &rh_pht LGUI O     &kp APOS
&kp LCTRL   &kp Z           &kp X           &kp C              &kp D              &kp V                &kp K          &kp H             &kp CMMA           &kp DOT           &kp FSLH           &kp ENTER
                                            &lt MEDIA ESC      &lt NAV SPACE      &lt MOUSE TAB        &lt SYM ENTER  &lt NUM BSPC      &lt FN DEL
            >;
        };

        qwerty {
// -----------------------------------------------------------------------------------------------------------------------------
// |        |   Q    |   W    |     E     |     R     |     T     | # |     Y     |     U    |    I    |    O   |   P    |     |
// |        | A/LGUI | S/LALT |  D/LCTRL  |  F/LSHFT  |     G     | # |     H     | J/LSHFT  | K/LCTRL | L/LALT | ;/LGUI |     |
// |        |   Z    |   X    |     C     |     V     |     B     | # |     N     |     M    |    ,    |    .   |   /    |     |
//                            | ESC/MEDIA | SPC/NAV   | TAB/MOUSE | # | ENTER/SYM | BSPC/NUM | DEL/FN  |

            bindings = <
&trans      &kp Q           &kp W           &kp E              &kp R              &kp T                &kp Y          &kp U             &kp I              &kp O             &kp P              &trans
&trans      &lh_pht LGUI A  &lh_pht LALT S  &lh_pht LCTRL D    &lh_pht LSHFT F    &kp G                &kp H          &rh_pht LSHFT J   &rh_pht LCTRL K    &rh_pht LALT L    &rh_pht LGUI SEMI  &trans
&trans      &kp Z           &kp X           &kp C              &kp V              &kp B                &kp N          &kp M             &kp CMMA           &kp DOT           &kp FSLH           &trans
                                            &lt MEDIA ESC      &lt NAV SPACE      &lt MOUSE TAB        &lt SYM ENTER  &lt NUM BSPC      &lt FN DEL
            >;
        };

        nav {
// -------------------------------------------------------------------------------------------
// |     |      |      |       |       |     | # | UNDO  | HOME | UP   | END   | REDO | COLEMAK  |
// |     | LGUI | LALT | LCTRL | LSHFT |     | # | PG_UP | LEFT | DOWN | RIGHT |      | QWERTY   |
// |     |      | RALT |       |       |     | # | PG_DN | PSTE | COPY | CUT   |      | CAPSWORD |
//                     |       | HELD  |     | # | ENTER | BSPC | DEL  |

            bindings = <
&trans  &trans    &trans    &trans     &trans     &trans        &kp K_UNDO    &kp HOME    &kp UP      &kp END      &kp K_REDO  &to COLEMAK
&trans  &trans    &trans    &trans     &trans     &trans        &kp PG_UP     &kp LEFT    &kp DOWN    &kp RIGHT    &trans      &to QWERTY
&trans  &trans    &trans    &trans     &trans     &trans        &kp PG_DN     &kp K_PASTE &kp K_COPY  &kp K_CUT    &trans      &caps_word
                            &trans     &trans     &trans        &kp ENTER     &kp BSPC    &kp DEL
            >;
        };

        numbers {
// -----------------------------------------------------------------------------------
// |     |  [  |  7  |  8  |  9  |  ]  | # |     |       |       |      |      |     |
// |     |  ;  |  4  |  5  |  6  |  =  | # |     | LSHFT | LCTRL | LALT | LGUI |     |
// |     |  `  |  1  |  2  |  3  |  \  | # |     |       |       |      |      |     |
//                   |  .  |  0  |  -  | # |     | HELD  |       |

            bindings = <
&trans  &kp LBKT   &kp N7  &kp N8   &kp N9  &kp RBKT         &trans  &trans     &trans     &trans    &trans    &trans
&trans  &kp SQT    &kp N4  &kp N5   &kp N6  &kp EQUAL        &trans  &kp LSHFT  &kp LCTRL  &kp LALT  &kp LGUI  &trans
&trans  &kp GRAVE  &kp N1  &kp N2   &kp N3  &kp BSLH         &trans  &trans     &trans     &trans    &trans    &trans
                           &kp DOT  &kp N0  &kp MINUS        &trans  &trans     &trans
            >;
        };

        symbols {
// ------------------------------------------------------------------------------------
// |     |  {  |  &  |  *  |  (  |  }  | # |      |       |       |      |      |     |
// |     |  :  |  $  |  %  |  ^  |  +  | # |      | LSHFT | LCTRL | LALT | LGUI |     |
// |     |  ~  |  !  |  @  |  #  |  |  | # |      |       |       |      |      |     |
//                   |  (  |  )  |  _  | # | HELD |       |       |

            bindings = <
&trans  &kp LBRC   &kp AMPS  &kp ASTRK  &kp LPAR   &kp RBRC              &trans  &trans     &trans     &trans    &trans    &trans
&trans  &kp DQT    &kp DLLR  &kp PRCNT  &kp CARET  &kp PLUS              &trans  &kp LSHFT  &kp LCTRL  &kp LALT  &kp LGUI  &trans
&trans  &kp TILDE  &kp EXCL  &kp AT     &kp HASH   &kp PIPE              &trans  &trans     &trans     &trans    &trans    &trans
                             &kp LPAR   &kp RPAR   &kp UNDERSCORE        &trans  &trans     &trans
            >;
        };

        media {
// -----------------------------------------------------------------------------------------------------
// |     |      |      |       |       |      | # |      |        | VOL_U  |       |      |     |
// |     | LGUI | LALT | LCTRL | LSHFT |      | # |      | PREV   | VOL_D  | NEXT  |      |     |
// |     |      |      |       |       |      | # |      | PLAY   | STOP   |       |      |     |
//                     | HELD  |       |      | # |      |        | MUTE   |

            bindings = <
&trans  &trans    &trans    &trans     &trans     &trans        &trans      &trans      &cp C_VOL_UP  &trans       &trans   &trans
&trans  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &trans        &trans      &cp C_PREV  &cp C_VOL_DN  &cp C_NEXT   &trans   &trans
&trans  &trans    &trans    &trans     &trans     &trans        &trans      &cp C_PLAY  &bt C_STOP    &trans       &trans   &trans
                            &trans     &trans     &trans        &trans      &trans      &cp C_MUTE
            >;
        };

        function {
// ------------------------------------------------------------------------------------------
// |     |  F12 |  F7  |  F8  |  F9   | PSCRN | # |     |       |       |      |      |     |
// |     |  F11 |  F4  |  F5  |  F6   | SLCK  | # |     | LSHFT | LCTRL | LALT | LGUI |     |
// |     |  F10 |  F1  |  F2  |  F3   | PAUSE | # |     |       |       |      |      |     |
//                     | ESC  | SPACE |  TAB  | # |     |       | HELD  |

            bindings = <
&trans  &kp F12  &kp F7  &kp F8   &kp F9     &kp PSCRN              &trans  &trans     &trans     &trans    &trans    &trans
&trans  &kp F11  &kp F4  &kp F5   &kp F6     &kp SLCK               &trans  &kp LSHFT  &kp LCTRL  &kp LALT  &kp LGUI  &trans
&trans  &kp F10  &kp F1  &kp F2   &kp F3     &kp PAUSE_BREAK        &trans  &trans     &trans     &trans    &trans    &trans
                         &kp ESC  &kp SPACE  &kp TAB                &trans  &trans     &trans
            >;
        };

// TODO
// Add mouse keys when implemented in ZMK

        mouse {
// ------------------------------------------------------------------------------------
// |     |      |      |       |       |      | # |     |     |     |     |     |     |
// |     | LGUI | LALT | LCTRL | LSHFT |      | # |     |     |     |     |     |     |
// |     |      | RALT |       |       |      | # |     |     |     |     |     |     |
//                     |       |       | HELD | # |     |     |     |

             bindings = <
&trans  &trans    &trans    &trans     &trans     &trans        &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &trans        &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans    &kp RALT  &trans     &trans     &trans        &trans  &trans  &trans  &trans  &trans  &trans
                            &trans     &trans     &trans        &trans  &trans  &trans
            >;
        };
    };
};
