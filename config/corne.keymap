#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>

// Layer Definitions
#define COLEMAK 0
#define MACRO 1
#define EXTEND 2
#define SYM 3
#define NUM 4
#define FUNC 5
#define MEDIA 6
#define MOUSE 7

// Macros
#define AS(keycode) &as LS(keycode) keycode     // Autoshift Macro				

// To do
// - find a place for FUNC, MEDIA, and MOUSE to be toggled, maybe both thumbs toggles a selection layer?

// Backspace/delete multiple on double tap hold
&lt {
    tapping-term-ms = <250>;
    quick_tap_ms = <200>;
    flavor = "tap-preferred";
};

/ {
    // Behavior configuration from https://zmk.dev/docs/behaviors/hold-tap
    behaviors {
        as: auto_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTO_SHIFT";
            #binding-cells = <2>;
            tapping_term_ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        hm: homerow {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <300>;    // <---[[moderate duration]]
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        hshft: homerow_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_SHIFT";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <199>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        ht_tp: holdtap_tappreferred {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP_TAP_PREFERRED";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            bindings = <&kp>, <&kp>;
        };
        skq: sticky_key_quick_release {
            compatible = "zmk,behavior-sticky-key";
            label = "STICKY_KEY_QUICK_RELEASE";
            #binding-cells = <1>;
            bindings = <&kp>;
            release-after-ms = <1000>;
            quick-release;
        };
        hltr: hold_layer_tap_repeat {
            label = "HOLD_LAYER_TAP_REPEAT";
            #binding-cells = <2>;
            compatible = "zmk,behavior-hold-tap";
            bindings = <&mo>, <&key_repeat>;
            tapping-term-ms = <120>;
            flavor = "tap-preferred";
        };
        hmtsk: hold_mod_tap_sticky_key {
            label = "HOLD_MOD_TAP_STICKY_KEY";
            #binding-cells = <2>;
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&skq>;
            tapping-term-ms = <120>;
            flavor = "tap-preferred";
        };
        hltsk: hold_layer_tap_sticky_key {
            label = "HOLD_LAYER_TAP_STICKY_KEY";
            #binding-cells = <2>;
            compatible = "zmk,behavior-hold-tap";
            bindings = <&mo>, <&skq>;
            tapping-term-ms = <120>;
            flavor = "tap-preferred";
        };
        hltsl: hold_layer_tap_sticky_layer {
            label = "HOLD_LAYER_TAP_STICKY_LAYER";
            #binding-cells = <2>;
            compatible = "zmk,behavior-hold-tap";
            bindings = <&mo>, <&sl>;
            tapping-term-ms = <120>;
            flavor = "tap-preferred";
        };
    };
   
    combos {
        compatible = "zmk,combos";
        combo_qw_esc {
            timeout-ms = <100>;
            key-positions = <1 2>;
            bindings = <&kp ESC>;
        };
        combo_dotslash_enter {
            timeout-ms = <100>;
            key-positions = <33 34>;
            bindings = <&kp ENTER>;
        }
        combo_thumbs_capsword {
            timeout-ms = <100>;
            key-positions = <38 39>;
            bindings = <&caps_word>;
        };
        combo_ysemi_repeat {
            timeout-ms = <100>;
            key-positions = <9 10>;
            bindings = <&key_repeat>;
        };
        combo_zx_shift {
            timeout-ms = <100>;
            key-positions = <25 26>;
            bindings = <&skq LSHFT>;
        };
    };
    
    macros {
        mac_a: mac_a {
            label = "macro_a_and";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap &kp A &kp N &kp D>;
        };
        mac_d: mac_d {
            label = "macro_d_ould";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap &kp O &kp U &kp L &kp D>;
        };
        mac_e: mac_e {
            label = "macro_e_every";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap &kp E &kp V &kp E &kp R &kp Y>;
        };        
        mac_f: mac_f {
            label = "macro_f_for";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap &kp F &kp O &kp R>;
        };
        mac_g: mac_g {
            label = "macro_g_ing";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap &kp I &kp N &kp G>;
        };
        mac_h: mac_h {
            label = "macro_h_here";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap &kp H &kp E &kp R &kp E>;
        };
        mac_i: mac_i {
            label = "macro_i_ion";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap &kp I &kp O &kp N>;
        };
        mac_m: mac_m {
            label = "macro_m_ment";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap &kp M &kp E &kp N &kp T>;
        };
        mac_o: mac_o {
            label = "macro_o_ough";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap &kp O &kp U &kp G &kp H>;
        };
        mac_q: mac_q {
            label = "macro_q_que";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap &kp Q &kp U &kp E>;
        };
        mac_t: mac_t {
            label = "macro_t_the";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap &kp T &kp H &kp E>;
        };
        mac_w: mac_w {
            label = "macro_w_with";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap &kp W &kp I &kp T &kp H>;
        };
        mac_y: mac_y {
            label = "macro_y_you";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap &kp Y &kp O &kp U>;
        };
    };
    
// Keymap configuration (Colemak-DHm)
    keymap {
        compatible = "zmk,keymap";
        
        colemak {
// -----------------------------------------------------------------------------------------------------------------------------
// |   `        |   Q   |   W   |   F   |   P   |   B   | # |   J   |   L   |   U   |   Y   |   ;    | BSPC  |
// | TAB/EXTEND |   A   |   R   |   S   |   T   |   G   | # |   M   |   N   |   E   |   I   |   O    |   '   |
// | CTRL       |   Z   |   X   |   C   |   D   |   V   | # |   K   |   H   |   ,   |   .   |   /    | ENTER/SHIFT |
//                  |  MACRO |  BSPC/EXTEND  | SHIFT | # |  SYM  |  SPC  |  NUM  |  

            bindings = <   
&kp GRAVE           &kp Q            &kp W      &kp F    &kp P     &kp B                &kp J    &kp L    &kp U        &kp Y        &kp SEMI      &kp BSPC
&lt EXTEND TAB      &kp A            &kp R      &kp S    &kp T     &kp G                &kp M    &kp N    &kp E        &kp I        &kp O         &kp APOS
&skq LCTRL          &kp Z            &kp X      &kp C    &kp D     &kp V                &kp K    &kp H    &kp COMMA    &kp DOT      &kp FSLH      &mt LSHFT ENTER
                             &sl MACRO     &lt EXTEND BSPC   &skq LSHFT                 &sl SYM  &kp SPACE  &sl NUM
            >; 
        };
        
        macro {
// -----------------------------------------------------------------------------------------------------------------------------
// |     |   que  |  with |  for  |   P   |   B   | # |   J   |   L   |   U   |  you  |   ;    |       |
// |     |   and  |   R   |   S   |  the  |  ing  | # |  ment |   N   | every |  ion  |  ough  |       |
// |     |   Z    | email | email |  ould |   V   | # |   K   |  here |   ,   |   .   |   /    |       |
//                        | STK   |       |       | # |       |       |       |

            bindings = <
&trans         &mac_q      &mac_w      &mac_f    &trans     &trans                &trans    &trans    &trans        &mac_y        &trans      &trans
&trans         &mac_a      &trans      &trans    &mac_t     &mac_g                &mac_m    &trans    &mac_e        &mac_i        &mac_o      &trans
&trans         &trans      &trans      &trans    &mac_d     &trans                &trans    &mac_h    &trans        &trans        &trans      &trans
                                       &trans    &trans     &trans                &trans    &trans    &trans
            >;
        };                

        extend {
// -------------------------------------------------------------------------------------------
// | ESC  |      |      | ESC   | PSCRN |     | # | REDO  | HOME | UP   | END   | DELETE | LOCK |
// | HELD | LALT | LGUI | LSHFT | LCTRL |     | # | PG_UP | LEFT | DOWN | RIGHT | BSPC   |      |
// |      | UNDO | CUT  | COPY  | PASTE |     | # | PG_DN | UNDO | RPT  | REDO  | CPSWRD |      |
//                      |       | HELD  |     | # |       |      |      |

            bindings = <
&kp ESC  &trans     &trans    &kp ESC    &kp PSCRN   &trans        &kp LC(Y)     &kp HOME    &kp UP       &kp END      &kp DEL     &kp DEL
&trans   &kp LALT   &kp LGUI  &kp LSHFT  &kp LCTRL   &trans        &kp PG_UP     &kp LEFT    &kp DOWN     &kp RIGHT    &kp BSPC    &trans
&trans   &kp LC(Z)  &kp LC(X) &kp LC(C)  &kp LC(V)   &trans        &kp PG_DN     &kp LC(Z)   &key_repeat  &kp LC(Y)    &caps_word
                              &trans     &trans      &trans        &trans        &trans      &trans
            >;
        };

        sym {
// ------------------------------------------------------------------------------
// |     |     |  @  |  $  |  %  |  `  | # |  |  |  ^  |  *  |  =  |     | LOCK |
// |     |  &  |  [  |  {  |  (  |  -  | # |  +  |  )  |  }  |  ]  |  ~  |  "   |
// |     |     |  _  |  #  |  !  |  ;  | # |  :  |  "  |  <  |  >  |  ?  |      |
//                   |  /  |     |  \  | # | STK |     |      |

            bindings = <
&trans  &trans    &kp AT     &kp DLLR   &kp PRCNT  &kp GRAVE        &kp PIPE   &kp CARET  &kp STAR  &kp EQUAL  &trans     &kp K_LOCK
&trans  &kp AMPS  &kp LBKT   &kp LBRC   &kp LPAR   &kp MINUS        &kp PLUS   &kp RPAR   &kp RBRC  &kp RBKT   &kp TILDE  &kp DQT
&trans  &trans    &kp UNDER  &kp HASH   &kp EXCL   &kp SEMI         &kp COLON  &kp DQT    &kp LT    &kp GT     &kp QMARK  &trans
                             &kp FSLH   &trans     &kp BSLH         &trans     &trans     &trans
            >;
        };
       
        num {
// --------------------------------------------------------------------------------------
// |     |  !  |  @  |  #  |  $   |  %   | # |  ^  |   &   |   *   |   (   |   )   |     |
// |     |  1  |  2  |  3  |  4   |  5   | # |  6  |   7   |   8   |   9   |   0   |     |
// |     |     |     |     |      |      | # |     |       |   ,   |   .   |   /   |     |
//                   |     |      |      | # |     |       |  STK  |

            bindings = <
&trans  &kp EXCL  &kp AT    &kp HASH  &kp DLLR  &kp PRCNT     &kp CARET  &kp AMPS  &kp STAR  &kp LPAR  &kp RPAR  &trans
&trans  &kp N1    &kp N2    &kp N3    &kp N4    &kp N5        &kp N6     &kp N7    &kp N8    &kp N9    &kp N0    &trans
&trans  &trans    &trans    &trans    &trans    &trans        &trans     &trans    &trans    &trans    &trans    &trans
                            &trans    &trans    &trans        &trans     &trans    &trans
            >;
        };
        
        func {
// ------------------------------------------------------------------------------------------
// |     |  F1  |  F2  |  F3   |  F4  |  F5  | # |  F6  |  F7  |  F8  |  F9  |  F10  |  F11  |
// |     | LALT | LGUI | LSHFT | LCTRL|      | # |      |  F4  |  F5  |  F6  |       |       |
// |     |      |      |       |      |      | # |      |  F1  |  F2  |  F3  |       |       |
//                     |       |      |      | # |      |      | HELD |

            bindings = <
&trans  &kp F1    &kp F2    &kp F3      &kp F4        &kp F5              &kp F6  &kp F7     &kp F8     &kp F9    &kp F10    &kp F11
&trans  &kp LALT  &kp LGUI  &kp LSHFT   &kp LCTRL     &trans              &trans  &kp F4     &kp F5     &kp F6    &trans     &trans
&trans  &trans    &trans    &trans      &trans        &trans              &trans  &kp F1     &kp F2     &kp F3    &trans     &trans
                            &trans      &trans        &trans              &trans  &trans     &trans
            >;
        };

        media {
// -----------------------------------------------------------------------------------------------------
// |     |      |      |       |       |      | # |      |        | VOL_U  |       |      |     |
// |     | LALT | LGUI | LSHFT | LCTRL |      | # |      | PREV   | VOL_D  | NEXT  |      |     |
// |     |      |      |       |       |      | # |      | PLAY   | STOP   |       |      |     |
//                     | HELD  |       |      | # |      |        | MUTE   |

            bindings = <
&trans  &trans    &trans    &trans     &trans     &trans        &trans      &trans      &cp C_VOL_UP  &trans       &trans   &trans
&trans  &kp LALT  &kp LGUI  &kp LSHFT  &kp LCTRL  &trans        &trans      &cp C_PREV  &cp C_VOL_DN  &cp C_NEXT   &trans   &trans
&trans  &trans    &trans    &trans     &trans     &trans        &trans      &cp C_PLAY  &bt C_STOP    &trans       &trans   &trans
                            &trans     &trans     &trans        &trans      &trans      &cp C_MUTE
            >;
        };

// TODO
// Add mouse keys when implemented in ZMK

        mouse {
// ------------------------------------------------------------------------------------
// |     |      |      |       |       |      | # |     |     |     |     |     |     |
// |     | LGUI | LALT | LCTRL | LSHFT |      | # |     |     |     |     |     |     |
// |     |      | RALT |       |       |      | # |     |     |     |     |     |     |
//                     |       |       | HELD | # |     |     |     |

             bindings = <
&trans  &trans    &trans    &trans     &trans     &trans        &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &trans        &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans    &kp RALT  &trans     &trans     &trans        &trans  &trans  &trans  &trans  &trans  &trans
                            &trans     &trans     &trans        &trans  &trans  &trans
            >;
        };

    };
};
